// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test} from "forge-std/Test.sol";
import {playerScript, CoinFlipExploit} from "./CoinFlipExploit.sol";
import {CoinFlipFactory} from "./CoinFlipFactory.sol";
import {VyperUtils} from "src/utils/VyperUtils.sol";

contract CoinFlipExploitTest is Test {
    address playerAddr;
    CoinFlipFactory factory;
    address instanceAddr;

    function setUp() public {
        playerAddr = makeAddr("player");
        vm.deal(playerAddr, 1 ether);
        factory = new CoinFlipFactory();
        instanceAddr = factory.createInstance(playerAddr);
    }

    modifier solveChecker() {
        emit log_address(playerAddr);
        vm.startPrank(playerAddr, playerAddr);
        _;
        vm.stopPrank();
        assertTrue(factory.validateInstance(payable(instanceAddr), playerAddr), "Invalid Instance");
    }

    function testExploit() public solveChecker {
        playerScript(instanceAddr, vm);
    }

    function testExploitVyper() public solveChecker {
        VyperUtils vyperUtils = new VyperUtils();
        vm.allowCheatcodes(address(vyperUtils));
        address exploitAddr = vyperUtils.deploy("src/Ethernaut/CoinFlip/CoinFlipExploit.vy");
        for (uint256 i = 0; i < 10; i++) {
            vm.roll(i + 1);
            (bool success,) = exploitAddr.call(abi.encodeWithSignature("exploit(address)", instanceAddr));
            require(success);
        }
    }
}
