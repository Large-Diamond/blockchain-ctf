// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {Challenge} from "./challenge/Challenge.sol";

/*
S##########
..#...#...#
#.#.#.#.###
#...#...#.#
#####.###.#
#.#.#.....#
#.#.#.###.#
#.#.#.#...#
#.#.#.#.###
#.....#...G
###########
*/

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    uint256 upPrivateKey = 0x0000000000000000000000000000000000000000000000000000000000000046;
    address upAddr = vm.addr(upPrivateKey); // 0xF9A2C330a19e2FbFeB50fe7a7195b973bB0A3BE9
    uint256 leftPrivateKey = 0x0000000000000000000000000000000000000000000000000000000000000075;
    address leftAddr = vm.addr(leftPrivateKey); // 0x2ACf0D6fdaC920081A446868B2f09A8dAc797448
    uint256 downPrivateKey = 0x000000000000000000000000000000000000000000000000000000000000007a;
    address downAddr = vm.addr(downPrivateKey); // 0x872917cEC8992487651Ee633DBA73bd3A9dcA309
    uint256 rightPrivateKey = 0x000000000000000000000000000000000000000000000000000000000000005a;
    address rightAddr = vm.addr(rightPrivateKey); // 0x802271c02F76701929E1ea772e72783D28e4b60f

    Challenge challenge;
    address target;

    function setUp() public {
        vm.deal(playerAddr, 1 ether);
        challenge = new Challenge();
        target = challenge.target();
        vm.label(upAddr, "up");
        vm.label(leftAddr, "left");
        vm.label(downAddr, "down");
        vm.label(rightAddr, "right");
    }

    function _left() internal {
        vm.startPrank(leftAddr, leftAddr);
        target.call("");
        vm.stopPrank();
    }

    function _up() internal {
        vm.startPrank(playerAddr, playerAddr);
        target.call("1");
        vm.stopPrank();
    }

    function _right() internal {
        vm.startPrank(rightAddr, rightAddr);
        target.call("");
        vm.stopPrank();
    }

    function _down() internal {
        vm.startPrank(downAddr, downAddr);
        target.call("");
        vm.stopPrank();
    }

    function test() public {
        _down();
        _right();
        _down();
        _down();
        _right();
        _right();
        _up();
        _up();
        _right();
        _right();
        _down();
        _down();
        _down();
        _down();
        _right();
        _right();
        _right();
        _right();
        _down();
        _down();
        _left();
        _left();
        _down();
        _down();
        _right();
        _right();
        _right();

        assertTrue(challenge.isSolved());
    }
}
