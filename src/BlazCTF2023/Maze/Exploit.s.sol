// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Script, console2} from "forge-std/Script.sol";
import {Challenge} from "./challenge/Challenge.sol";

// forge script src/BlazCTF/Maze/Exploit.s.sol:ExploitScript --private-keys "0x59671f6fe0387b5651febb0cb3b95c5ef96284b755b042d1c5f61a12eba3a996" --private-keys "0x0000000000000000000000000000000000000000000000000000000000000046" --private-keys "0x0000000000000000000000000000000000000000000000000000000000000075" --private-keys "0x000000000000000000000000000000000000000000000000000000000000007a" --private-keys "0x000000000000000000000000000000000000000000000000000000000000005a" -vvvvv --broadcast

contract ExploitScript is Script {
    uint256 playerPrivateKey = 0x59671f6fe0387b5651febb0cb3b95c5ef96284b755b042d1c5f61a12eba3a996;
    address playerAddr = vm.addr(playerPrivateKey);
    uint256 upPrivateKey = 0x0000000000000000000000000000000000000000000000000000000000000046;
    address upAddr = vm.addr(upPrivateKey); // 0xF9A2C330a19e2FbFeB50fe7a7195b973bB0A3BE9
    uint256 leftPrivateKey = 0x0000000000000000000000000000000000000000000000000000000000000075;
    address leftAddr = vm.addr(leftPrivateKey); // 0x2ACf0D6fdaC920081A446868B2f09A8dAc797448
    uint256 downPrivateKey = 0x000000000000000000000000000000000000000000000000000000000000007a;
    address downAddr = vm.addr(downPrivateKey); // 0x872917cEC8992487651Ee633DBA73bd3A9dcA309
    uint256 rightPrivateKey = 0x000000000000000000000000000000000000000000000000000000000000005a;
    address rightAddr = vm.addr(rightPrivateKey); // 0x802271c02F76701929E1ea772e72783D28e4b60f

    Challenge challenge;
    address target;

    function setUp() public {
        challenge = Challenge(0xA50e1EaeF4bBbBCb2888Fb77E7261F1Ff7573A16);
        target = challenge.target();
        vm.label(upAddr, "up");
        vm.label(leftAddr, "left");
        vm.label(downAddr, "down");
        vm.label(rightAddr, "right");
    }

    function _left() internal {
        vm.startBroadcast(leftAddr);
        target.call("");
        vm.stopBroadcast();
    }

    function _up() internal {
        vm.startBroadcast(playerAddr);
        target.call("1");
        vm.stopBroadcast();
    }

    function _right() internal {
        vm.startBroadcast(rightAddr);
        target.call("");
        vm.stopBroadcast();
    }

    function _down() internal {
        vm.startBroadcast(downAddr);
        target.call("");
        vm.stopBroadcast();
    }

    function run() public {
        vm.startBroadcast(playerAddr);

        upAddr.call{value: 0.1 ether}("");
        leftAddr.call{value: 0.1 ether}("");
        downAddr.call{value: 0.1 ether}("");
        rightAddr.call{value: 0.1 ether}("");

        vm.stopBroadcast();

        _down();
        _right();
        _down();
        _down();
        _right();
        _right();
        _up();
        _up();
        _right();
        _right();
        _down();
        _down();
        _down();
        _down();
        _right();
        _right();
        _right();
        _right();
        _down();
        _down();
        _left();
        _left();
        _down();
        _down();
        _right();
        _right();
        _right();

        require(challenge.isSolved(), "not solved");
    }
}

// blaz{ju5t_4_q1tcode_2_esc4pe}
