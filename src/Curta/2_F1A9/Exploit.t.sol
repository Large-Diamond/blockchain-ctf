// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import {Test, console2} from "forge-std/Test.sol";
import {Curta} from "../general/CurtaLocal.sol";
import {F1A9} from "./challenge/Challenge.sol";

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    address deployerAddr = vm.addr(0x96ffbc7dd863ed58af7738afa6503b6fdfdf5768d87b6d97e9d49374c183a72c); // from profanity2
    Curta curta;
    F1A9 puzzle;
    uint32 puzzleId = 2;

    function setUp() public {
        curta = new Curta();
        curta.setPuzzleId(puzzleId - 1);
        puzzle = new F1A9();
        curta.addPuzzle(puzzle, 0);
        vm.deal(playerAddr, 1 ether);
        vm.warp(1678446000 - 1);
    }

    function test() public {
        vm.startPrank(deployerAddr, deployerAddr);
        Exploit exploit = new Exploit(address(curta));
        vm.stopPrank();

        vm.startPrank(playerAddr, playerAddr);
        assert(block.number == 1);
        curta.solve(puzzleId, uint256(uint160(address(exploit))));
        vm.stopPrank();
    }
}

// F1A9305c...
contract Exploit {
    address public curtaPlayer;

    constructor(address playerAddr) {
        curtaPlayer = playerAddr;
    }
}
