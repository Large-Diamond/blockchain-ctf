// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-std/Test.sol";

contract ExploitTest is Test {
    address vaultAddress = 0x6E4198C61C75D1B4D1cbcd00707aAC7d76867cF8;

    function setUp() public {
        bytes memory bytecode =
            hex"600836101561000e5760006000fd5b610168565b600065069b135a06c38201608081029050650b3abdcef1f18118905080660346d81803d47114159150505b919050565b600081600f526004600f2066fd28448c97d19c8160c81c14159150505b919050565b6000338031813b823f63ff000000811660181c6004600b6007873c600460072060ff811660778114838614670de0b6b3a76400008811607760ff8b1614020202159750505050505050505b919050565b600062ffff00821660081c600d8160071b0160020260ff8460181c166101010260ff60ff8616600202166003014303408083018218600014159450505050505b919050565b6000303f806007526000600060005b6020811015610142576001600187831c1614156101365760ff600751600883021c16830192506001820191505b5b600181019050610109565b50601181146105398306610309140293505050505b919050565b6000600090505b919050565b60003560e01c60043560e01c81637672667981146101cc57634141414181146101ea576342424242811461020e57634343434381146102325763444444448114610256576345454545811461027a57634646464681146102a05760006000fd6102c0565b6113375460ff8114156101e457600165736f6c766564555b506102c0565b6101f382610013565b8015156102085761133754604a811861133755505b506102c0565b61021782610043565b80151561022c576113375460d1811861133755505b506102c0565b61023b82610065565b80151561025057611337546064811861133755505b506102c0565b61025f826100b5565b801515610274576113375460b2811861133755505b506102c0565b610283826100fa565b600181141561029a57611337546063811861133755505b506102c0565b6102a98261015c565b8015156102be576113375460c4811861133755505b505b50005050";
        vm.etch(vaultAddress, bytecode);
        vm.store(vaultAddress, bytes32(uint256(0x1337)), 0);
    }

    function test41414141() public {
        uint256 param1 = ((0x0346d81803d471 ^ 0xb3abdcef1f1) / uint256(0x80) - 0x069b135a06c3) << 224; // 80486202565115466310871716035167973708900655882045620911654993608634601046016
        vaultAddress.call(abi.encodeWithSelector(hex"41414141", param1));
        assertTrue(vm.load(vaultAddress, bytes32(uint256(0x1337))) > 0);
    }

    function test43434343() public {
        address playerAddress = 0x9B78dD13A201518D87A9f4F9b8165b4Df2B391a4;
        vm.startPrank(playerAddress, playerAddress);
        bytes memory creationCode =
            hex"60568060093d393df369e8000000000000000000624500007f434343430000000000000000000000000000000000000000000000000000000060005260006000600860006000736e4198c61c75d1b4d1cbcd00707aac7d76867cf861fffff1";
        bytes memory runtimeCode =
            hex"69e8000000000000000000624500007f434343430000000000000000000000000000000000000000000000000000000060005260006000600860006000736e4198c61c75d1b4d1cbcd00707aac7d76867cf861fffff1";
        address addr = address(
            uint160(
                uint256(
                    keccak256(
                        abi.encodePacked(bytes1(0xff), playerAddress, bytes32(uint256(402)), keccak256(creationCode))
                    )
                )
            )
        );
        vm.etch(addr, runtimeCode);
        vm.deal(addr, 0x0de0b6b3a7640001);
        addr.call("");
        assertTrue(vm.load(vaultAddress, bytes32(uint256(0x1337))) > 0);
    }

    function test44444444() public {
        uint256 param1 = 436214393 << 224;
        vm.roll(5);
        vaultAddress.call(abi.encodeWithSelector(hex"44444444", param1));
        assertTrue(vm.load(vaultAddress, bytes32(uint256(0x1337))) > 0);
    }

    function test45454545() public {
        uint256 param1 = 1021951 << 224; // 0b11111001011111111111
        vaultAddress.call(abi.encodeWithSelector(hex"45454545", param1));
        assertTrue(vm.load(vaultAddress, bytes32(uint256(0x1337))) > 0);
    }
}
