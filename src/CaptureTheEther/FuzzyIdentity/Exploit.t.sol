// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "./FuzzyIdentityChallenge.sol";
import "src/utils/Create2.sol";

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    FuzzyIdentityChallenge challenge;

    function setUp() public {
        challenge = new FuzzyIdentityChallenge();
        vm.deal(playerAddr, 1 ether);
    }

    function test() public {
        vm.startPrank(playerAddr, playerAddr);

        Create2Deployer deployer = new Create2Deployer();
        assert(address(deployer) == 0xce110ab5927CC46905460D930CCa0c6fB4666219);
        bytes32 salt = bytes32(uint256(44467191));
        address exploitAddr = deployer.deploy(vm.getCode("Exploit.t.sol:FuzzyIdentityExploit"), salt);
        FuzzyIdentityExploit(exploitAddr).exploit(address(challenge));

        vm.stopPrank();
        assertTrue(challenge.isComplete(), "Challenge is not complete");
    }
}

contract FuzzyIdentityExploit {
    function exploit(address challengeAddr) public {
        FuzzyIdentityChallenge(challengeAddr).authenticate();
    }

    function name() public pure returns (bytes32) {
        return bytes32("smarx");
    }
}
