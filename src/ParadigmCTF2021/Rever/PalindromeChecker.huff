// 37 bytes

#define macro MAIN() = takes (0) returns (0) {
    returndatasize  // [0]
    calldataload    // [calldata]
    returndatasize  // [i <- 0, calldata]

    // for example:
    // calldata = "aba" = 0x61626100...
    // calldatasize = 3

    label03:

        dup1            // [i, i, calldata]
        calldatasize    // [calldatasize, i, i, calldata]
        eq              // [calldatasize == i, i, calldata]
        0x1a            // [label1a, calldatasize == 0, i, calldata]    using PUSH1 not PUSH2
        jumpi           // [i, calldata]

        dup2            // [calldata, i, calldata]
        dup2            // [i, calldata, i, calldata]
        0x01            // [1, i, calldata, i, calldata]
        calldatasize    // [calldatasize, 1, i, calldata, i, calldata]
        sub             // [calldatasize - 1, i, calldata, i, calldata]
        sub             // [s <- calldatasize - 1 - i, calldata, i, calldata]
        byte            // [calldata[s], i, calldata]
        dup2            // [i, calldata[s], i, calldata]
        mstore8         // [i, calldata]
        0x01            // [1, i, calldata] TODO: 0x01 -> pc
        add             // [i <- i + 1, calldata]
        0x03            // [label03, i, calldata]
        jump            // [i, calldata]

    label1a:
        pop             // [calldata]
        returndatasize  // [0, calldata]
        mload           // [memory[0], calldata]
        xor             // [memory[0] ^ calldata]
        iszero          // [isPalindrome]
        returndatasize mstore
        msize returndatasize return
}