// SPDX-License-Identifier: Unlicense
pragma solidity ^0.8.15;

import "foundry-huff/HuffDeployer.sol";
import "forge-std/Test.sol";
import "./challenge/Setup.sol";

contract ReverExploitTest is Test {
    address playerAddress = address(10);

    function testExploit() public {
        Setup setup = new Setup();    
        bytes memory bytecode = compilePalindromeChecker();

        vm.startPrank(playerAddress, playerAddress);

        bytecode = bytes.concat(bytecode, flip(bytecode));
        setup.challenge().deploy(bytecode);

        vm.stopPrank();

        assertEq(setup.test(""), true);
        assertEq(setup.test("a"), true);
        assertEq(setup.test("ab"), false);
        assertEq(setup.test("aba"), true);
        assertEq(setup.test("paradigm"), false);
        assertEq(setup.test("tattarrattat"), true);
    }

    function compilePalindromeChecker() public returns (bytes memory) {
        string[] memory cmds = new string[](3);
        cmds[0] = "huffc";
        cmds[1] = string(string.concat("src/ParadigmCTF2021/Rever/PalindromeChecker.huff"));
        cmds[2] = "-r";
        bytes memory bytecode = vm.ffi(cmds);
        return bytecode;
    }

    function flip(bytes memory a) private pure returns (bytes memory) {
        bytes memory b = new bytes(a.length);
        for (uint256 i = 0; i < a.length; i++) {
            b[b.length - i - 1] = a[i];
        }
        return b;
    }
}
