from ecdsa import ecdsa
from pwn import *

from challenge.chal import hash_message

io = process(["python", "challenge/chal.py"], level='debug')

messages = [b"a", b"b", b"c", b"d"]
r = []
s = []
z = []

for i in range(4):
    io.sendlineafter(b"message? ", messages[i])
    io.recvuntil(b"r=")
    r.append(int(io.readline().strip(), 16))
    io.recvuntil(b"s=")
    s.append(int(io.readline().strip(), 16))

    z.append(hash_message(messages[i].decode()))

g = ecdsa.generator_secp256k1
n = g.order()

k = (z[0] - z[1]) * pow(s[0] - s[1], -1, n) % n
d = (s[0] * k - z[0]) * pow(r[0], -1, n) % n
d_ = (s[1] * k - z[1]) * pow(r[1], -1, n) % n
assert d == d_

pub = ecdsa.Public_key(g, g * d)
priv = ecdsa.Private_key(pub, d)

io.recvuntil(b"test=")
test = int(io.readline().strip(), 16)
sig = priv.sign(test, r[0])
io.sendlineafter(b"r? ", f"{sig.r:032x}".encode())
io.sendlineafter(b"s? ", f"{sig.s:032x}".encode())

flag = io.recvall()
assert b"PCTF" in flag
print(flag)