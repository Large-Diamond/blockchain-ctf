from challenge.chal import hash_message
from ecdsa import ecdsa
from pwn import process


def same_nonce_attack(r: list[int], s: list[int], z: list[int]) -> ecdsa.Private_key:
    g = ecdsa.generator_secp256k1
    n = g.order()

    k = (z[0] - z[1]) * pow(s[0] - s[1], -1, n) % n
    d = (s[0] * k - z[0]) * pow(r[0], -1, n) % n
    d_ = (s[1] * k - z[1]) * pow(r[1], -1, n) % n
    assert d == d_

    pub = ecdsa.Public_key(g, g * d)
    priv = ecdsa.Private_key(pub, d)
    return priv


if __name__ == "__main__":
    io = process(["python", "challenge/chal.py"], level="debug")

    r = []
    s = []
    z = []

    for message in [b"a", b"b", b"c", b"d"]:
        io.sendlineafter(b"message? ", message)
        io.recvuntil(b"r=")
        r.append(int(io.readline().strip(), 16))
        io.recvuntil(b"s=")
        s.append(int(io.readline().strip(), 16))

        z.append(hash_message(message.decode()))

    priv = same_nonce_attack(r, s, z)

    io.recvuntil(b"test=")
    test = int(io.readline().strip(), 16)
    sig = priv.sign(test, r[0])
    io.sendlineafter(b"r? ", f"{sig.r:032x}".encode())
    io.sendlineafter(b"s? ", f"{sig.s:032x}".encode())

    flag = io.recvall()
    assert b"PCTF" in flag
    print(flag)
