import asyncio

from starknet_py.contract import Contract
from starknet_py.net import AccountClient
from starknet_py.net.gateway_client import GatewayClient
from starknet_py.net.models import StarknetChainId
from starknet_py.net.signer.stark_curve_signer import KeyPair
from starkware.crypto.signature.signature import private_to_stark_key
from starkware.starknet.core.os.contract_address.contract_address import \
    calculate_contract_address_from_hash


async def main():
    client = GatewayClient("<RPC>", chain=StarknetChainId.TESTNET)
    player_private_key = 0x0 # PRIVATE_KEY
    contract_address = ("<CONTRACT_ADDRESS>")

    player_public_key = private_to_stark_key(player_private_key)
    player_address = calculate_contract_address_from_hash(salt=20, class_hash=1803505466663265559571280894381905521939782500874858933595227108099796801620, constructor_calldata=[player_public_key], deployer_address=0, )
    player_key_pair = KeyPair(private_key=player_private_key, public_key=player_public_key)
    acc_client = AccountClient(client=client, address=player_address, key_pair=player_key_pair, chain=StarknetChainId.TESTNET, )

    contract = await Contract.from_address(contract_address, acc_client)

    invocation = await contract.functions["solve"].invoke(7168366, max_fee=int(1e16))
    await invocation.wait_for_acceptance()


asyncio.run(main())